#!/usr/bin/python
#coding: UTF-8

print("简单测试！")

num_01 = 10           
string_01 = "string"
'''
	多行注释：
		单行注释：其他语言使用的是","隔开 ，在Python中使用"%"隔开
'''
print("num_01:%d string_01:%s"%(num_01,string_01)) # 单行注释

'''
	运算符：
		// 取商  %取余   
		   5//2 ==> 2     5%2 ==> 1
		+=   -=   *=   /=   //=

		>     <     =  <=   >=  !=  <>(不等于)   
		!= 和 <> 均是不等于

		and 与    or 或   not 非



	位操作符

		a 为 60，b 为 13  
		
		a = 0011 1100
		b = 0000 1101

		&	按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0
			(a & b) 输出结果 12 ，二进制解释： 0000 1100
		|	按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。
			(a | b) 输出结果 61 ，二进制解释： 0011 1101
		^	按位异或运算符：当两对应的二进位相异时，结果为1
			(a ^ b) 输出结果 49 ，二进制解释： 0011 0001
		~	按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1
			(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。
		<<	左移动运算符：运算数的各二进位全部左移若干位，由"<<"右边的数指定移动的位数，高位丢弃，低位补0。
			a << 2 输出结果 240 ，二进制解释： 1111 0000
		>>	右移动运算符：把">>"左边的运算数的各二进位全部右移若干位，">>"右边的数指定移动的位数
			a >> 2 输出结果 15 ，二进制解释： 0000 1111


	is	    is是判断两个标识符是不是引用自一个对象
	    	x is y, 如果 id(x) 等于 id(y) , is 返回结果 1
	is not	is not是判断两个标识符是不是引用自不同对象	
			x is not y, 如果 id(x) 不等于 id(y). is not 返回结果 1
'''

age = 20
if age >= 18:
	print("你已经成年")
	print("恭喜你 可以结婚了！")

a = 10
b = 10
if a is b:
	print "a和b引用的是同一个对象"

c = 11
if a is not c:
	print "a和c引用的不是同一个对象"








